import requests
import pandas as pd
from datetime import datetime

# Configurações
GITLAB_API_URL = "https://gitlab.com/api/v4"
TOKEN = "SEU_PERSONAL_ACCESS_TOKEN"  # Substitua pelo seu token
INPUT_CSV = "projects.csv"  # Arquivo de entrada com IDs dos projetos
OUTPUT_CSV = "dev_stats_quarterly.csv"  # Arquivo de saída com estatísticas trimestrais

def get_merge_requests(project_id):
    """Obtém merge requests de um projeto específico."""
    headers = {"Private-Token": TOKEN}
    url = f"{GITLAB_API_URL}/projects/{project_id}/merge_requests"
    params = {"state": "merged", "per_page": 100}
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Erro ao obter MRs do projeto {project_id}: {response.text}")
        return []

def get_review_comments(project_id, mr_iid):
    """Obtém comentários de revisão de um merge request específico."""
    headers = {"Private-Token": TOKEN}
    url = f"{GITLAB_API_URL}/projects/{project_id}/merge_requests/{mr_iid}/notes"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Erro ao obter comentários do MR {mr_iid} no projeto {project_id}: {response.text}")
        return []

def get_quarter(date_str):
    """Retorna o trimestre baseado em uma data."""
    date = datetime.fromisoformat(date_str.replace("Z", ""))
    return f"{date.year}-Q{(date.month - 1) // 3 + 1}"

def collect_stats(project_id):
    """Coleta estatísticas de merge requests e comentários para um projeto."""
    merge_requests = get_merge_requests(project_id)
    dev_stats = {}

    for mr in merge_requests:
        author = mr["author"]["username"]
        mr_iid = mr["iid"]
        created_at = mr["created_at"]
        quarter = get_quarter(created_at)

        # Inicializar estatísticas para o desenvolvedor no trimestre
        if author not in dev_stats:
            dev_stats[author] = {}
        if quarter not in dev_stats[author]:
            dev_stats[author][quarter] = {"project_id": project_id, "mrs": 0, "comments_received": 0}

        dev_stats[author][quarter]["mrs"] += 1

        # Obter comentários do MR
        comments = get_review_comments(project_id, mr_iid)
        dev_stats[author][quarter]["comments_received"] += len(comments)

    # Calcular comentários por MR
    for dev in dev_stats:
        for quarter in dev_stats[dev]:
            stats = dev_stats[dev][quarter]
            stats["comments_per_mr"] = stats["comments_received"] / stats["mrs"] if stats["mrs"] > 0 else 0

    return dev_stats

def main():
    # Ler IDs dos projetos do CSV
    projects_df = pd.read_csv(INPUT_CSV)
    all_stats = []

    for _, row in projects_df.iterrows():
        project_id = row["project_id"]
        print(f"Coletando dados do projeto: {project_id}")

        # Coletar estatísticas do projeto
        stats = collect_stats(project_id)
        for dev, quarters in stats.items():
            for quarter, data in quarters.items():
                all_stats.append({
                    "developer": dev,
                    "project_id": data["project_id"],
                    "quarter": quarter,
                    "mrs": data["mrs"],
                    "comments_received": data["comments_received"],
                    "comments_per_mr": data["comments_per_mr"],
                })

    # Salvar resultados em um CSV
    output_df = pd.DataFrame(all_stats)
    output_df.to_csv(OUTPUT_CSV, index=False)
    print(f"Estatísticas trimestrais salvas em: {OUTPUT_CSV}")

if __name__ == "__main__":
    main()
